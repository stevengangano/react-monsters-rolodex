{"version":3,"sources":["components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardList","props","SearchBox","placeholder","handleChange","type","className","onChange","App","componentDidMount","fetch","then","data","json","users","setState","monsters","e","searchField","target","value","state","this","filteredMonsters","filter","monster","name","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAUaA,G,YAAW,SAAAC,MCNXC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACxB,2BAAQC,KAAK,SACXC,UAAU,SACJH,YAAeA,EACfI,SAAUH,MCiDJI,G,wDAjDb,aAAe,IAAD,8BACZ,gBAQFC,kBAAoB,WAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAIlBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACC,SAAUF,QAf5B,EAqBdV,aAAe,SAAAa,GACb,EAAKF,SAAS,CAAEG,YAAaD,EAAEE,OAAOC,SAnBtC,EAAKC,MAAQ,CACXL,SAAU,GACVE,YAAa,IALH,E,qDA0BJ,IAAD,EAC2BI,KAAKD,MAA/BL,EADD,EACCA,SAAUE,EADX,EACWA,YAEZK,EAAmBP,EAASQ,QAAO,SAAAC,GAAO,OAC9CA,EAAQC,KAAKC,cAAcC,SAASV,EAAYS,kBAGlD,OACE,yBAAKrB,UAAU,OACb,wBAAIA,UAAU,SAAd,oBACA,kBAAC,EAAD,CACEH,YAAY,kBAEZC,aAAckB,KAAKlB,eAErB,kBAAC,EAAD,CAAUY,SAAUO,S,GA1CVM,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.93c780a4.chunk.js","sourcesContent":["import React from 'react';\n\n//Import Card \nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\n//props is an object you can add to <CardList/> in app.js\n//For example, <CardList name = \"Stebs\" />\n//This will console.log 'Stebs'\nexport const CardList = props => (\n\t//'props.monsters.map' grabs the prop 'monsters' from\n\t//<CardList monsters={this.state.monsters}> in app.js\n\t//then uses 'map' to iterate for each object in the array\n\t//from 'this.state.monsters'\n\t//*******************************************************\n\t//Import Card\n\t//Create a prop 'monster = {monster}'\n\t//'{monster}' grabs the data from this.state.monsters'\n\t<div className='card-list'>\n\t  {\n\t    props.monsters.map(monster => (\n\t      <Card key={monster.id} monster={monster} /> \n\t  ))}\n\t</div>\n\n)\n","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n\t<input \ttype='search' \n\t\t\tclassName='search'\n       \t\tplaceholder = {placeholder}\n\t       \tonChange={handleChange}\n\n\t/>\n);","import React from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component'\nimport './App.css';\n\n//The same as import React, {Component} from 'react'; \nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount = () => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(data => data.json())\n    //users = data\n    //this.setState grabs the property \"monsters\" and injects it with users \n    //**** See notes below on how this.state looks ****\n    .then(users => this.setState({monsters: users}))\n\n  }\n\n  //Using an arrow function automatically references 'this.setState' to 'class App'\n  //This enables us, to update the searchField state\n  handleChange = e => {\n    this.setState({ searchField: e.target.value});\n  }\n\n\n  render() {\n    const { monsters, searchField } = this.state;\n\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n    return (\n      <div className=\"App\"> \n        <h1 className='title'>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search monsters'\n          //this.handleChange is referencing the arrow function 'handleChange'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}